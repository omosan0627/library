区別をしない　AGC014E
時系列で物を使うとき、使っているものを使っていないことにしたりする AOJ2266 ARC072F
あるものを違うものにうまく変換して見通しをよくする(見比べない) AGC017C
特殊ケースでの言い換えをいろんなケースに適応してみる AGC017C
保持するものを変える AGC014E ARC074E
最大最小に注目する ARC074E
独立を考える
独立性は数式から ARC075F
文字列比較は文字数から ARC080E
実装と考察を混同しない 
区間は累積和(orそれと似ているの) ARC080F POJ2566
考察は部分を大切にする。自明を大切にする
すべての問題は(dp or 貪欲 or フロー)
単調性を利用する
シンプルな言い換えが重要
性質を見出して、問題を言い換える
何かの値を決めてみる
値を決める順番を考える
順番を単純化して実装を軽くする AGC019E
細部にすぐ入り込まない
完成形から考える。逆から考える。
声に出して考える感じ
つまったら別のグラフを書いてみる ARC082D
つまったら方針すぐ変える
明確な考察ができるまではアルゴリズムに走らない
回転は列。無駄に二倍の列を作らない。 AGC019D
自分で適当なサンプルを作る際はN=10くらいがよさそう。
文字列は周期。 ARC077F
単純な記号の組み合わせで考察する。 AGC019E Tenka2013FinalD
ゆるーく考えたりキツく考える Tenka2016EliminationA:D AOJ 2427
わからない問題はフローor数学 POJ2345
O(NlogN)は貪欲orDP高速化=愚直に値を持つDP CF441E


無向グラフはdfs木orUnionFind(マージテクを含む) CF434D
dfs木は下から見る。上からはあまり情報得られない。 CF434D
グラフ構築問題はウニグラフなど特徴的なものを疑う。 CF AIM Tech Round4C
木は点と辺(とgrundy)のどれを主役にするかが大事 TDPC_P AGC017D
dpの意味をきちんと見出す ARC081E
高難易度の問題でWAを出したときこそ細かいミスをしていないか見る AOJ2230
最大値を求めるならlv=m最小値ならrv=m、初期値でミスらない AOJ2230
値の遷移を有向グラフで表せそうなら表してみる AGC016D AGC019E
マンハッタン距離は45度回転 CodeFestival2017A:D
包除原理は集合の重なり具合が本質 Tenka2013FinalD
構成ゲーはお気持ちを大切にする。 Tenka2016EliminationA:D
構成ゲーは2^n、まとまり、順番に意識する Tenka2016EliminationA:D, CodeFestival2017A:D, CF AIM Tech Round4C
複雑なコンビネーションの式は経路の問題に落としこむ CodeFestival2017A:E
modの問題は式が重要。 POJ1150


構成ゲー苦手。
